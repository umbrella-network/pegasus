name: deploy_nonProd
on:
  workflow_dispatch:
    branches:
      - feature/*
      - release/*
      - hotfix/*
      - develop
      - main
    inputs:
      validator:
        required: true
        description: 'Please select validator you want to deploy the version'
        default: sbx_validator1
        type: choice
        options:
          - sbx_validator1
          - sbx_validator2

jobs:
  build_local:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials to SBX
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_NONPROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_NONPROD }}
          aws-region: ${{ secrets.AWS_REGION_NONPROD }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_NONPROD }}:role/Developers
          role-skip-session-tagging: true
          role-duration-seconds: 1800
      
      - name: Configure AWS Kubeconfig Credentials to SBX
        run: |
          aws --region ${{ secrets.AWS_REGION_NONPROD }} eks update-kubeconfig --kubeconfig ~/.kube/config-staging --name ${{ secrets.CLUSTER_NAME_NONPROD }}

      - name: Get sbx 1 image tag
        id: sbx_tag1
        if: inputs.validator == 'sbx_validator1'
        run: |
          export SBX_TAG=$(kubectl --kubeconfig ~/.kube/config-staging get deployments -n sandbox pegasus-api-bsc01 -o=jsonpath='{$$.spec.template.spec.containers[:1].image}' | awk -F':' '{print $2}')
          echo "The tag is: $SBX_TAG"
          echo "tag=$SBX_TAG" >> $GITHUB_OUTPUT
      
      - name: Get sbx 2 image tag
        id: sbx_tag2
        if: inputs.validator == 'sbx_validator2'
        run: |
          export SBX_TAG=$(kubectl --kubeconfig ~/.kube/config-staging get deployments -n sandbox pegasus-api-bsc02 -o=jsonpath='{$$.spec.template.spec.containers[:1].image}' | awk -F':' '{print $2}')
          echo "The tag is: $SBX_TAG"
          echo "tag=$SBX_TAG" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ECR }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ECR }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Extract Docker-image params
        id: docker-params
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          export IMAGE="$ECR_REGISTRY/pegasus"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
      
      - name: Build and push to sbx 1
        uses: docker/build-push-action@v6
        if: inputs.validator == 'sbx_validator1'
        with:
          context: .
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: |
            ${{ steps.docker-params.outputs.image }}:${{ steps.sbx_tag1.outputs.tag }}
      
      - name: Build and push to sbx 2
        uses: docker/build-push-action@v6
        if: inputs.validator == 'sbx_validator2'
        with:
          context: .
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: |
            ${{ steps.docker-params.outputs.image }}:${{ steps.sbx_tag2.outputs.tag }}
      
      - name: Log out of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

  restart_deployments:
    runs-on: ubuntu-latest
    needs: build_local
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials to non-prod
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_NONPROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_NONPROD }}
          aws-region: ${{ secrets.AWS_REGION_NONPROD }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_NONPROD }}:role/Developers
          role-skip-session-tagging: true
          role-duration-seconds: 1800
      
      - name: Configure AWS Kubeconfig Credentials to non_prod
        run: |
          aws --region ${{ secrets.AWS_REGION_NONPROD }} eks update-kubeconfig --kubeconfig ~/.kube/config-staging --name ${{ secrets.CLUSTER_NAME_NONPROD }}
      
      - name: Restart deployments to take last Image
        run: |          
          if [ "${{ inputs.validator }}" == "sbx_validator1" ]; then
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-api-bsc01 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-metrics-worker-bsc01 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-minting-worker-bsc01 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-dispatcher-worker-bsc01 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-scheduler-bsc01 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-agent-bsc01 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-deviation-leader-worker-bsc01 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-liquidity-worker-bsc01 -n sandbox
          fi

          if [ "${{ inputs.validator }}" == "sbx_validator2" ]; then
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-api-bsc02 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-metrics-worker-bsc02 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-minting-worker-bsc02 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-dispatcher-worker-bsc02 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-scheduler-bsc02 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-agent-bsc02 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-deviation-leader-worker-bsc02 -n sandbox
            kubectl --kubeconfig ~/.kube/config-staging rollout restart deployment/pegasus-liquidity-worker-bsc02 -n sandbox
          fi
